import groovy.json.JsonSlurper

plugins {
    id "com.android.application"
    id 'org.jetbrains.kotlin.android'
}

// Path to local QNN SDK.
// Download QNN SDK from https://qpm.qualcomm.com/#/main/tools/details/qualcomm_ai_engine_direct
// UPDATE PATH TO YOU LOCAL QNN SDK
def qnnSDKLocalPath="/Users/marcus.jonathan/qairt_folder/qairt/2.31.0.250130"

// List of model assets
def modelsConfigFile = file('src/main/assets/config/models.json')
def models = ["llama3_2_3b"]
if (modelsConfigFile.exists()) {
    def slurp = new JsonSlurper()
    def modelsConfig = slurp.parse(modelsConfigFile)
    models = modelsConfig.models
}

// Relative asset path for model configuration and binaries
def relAssetsPath = "src/main/assets/models/"
def buildDir = project(":app").getLayout().getBuildDirectory()
def libsDir = buildDir.dir("libs")

android {
    signingConfigs {
        release {
        }
    }
    compileSdk Integer.valueOf(androidCompileSDK)

    defaultConfig {
        applicationId "com.edgeai.chatappv2"

        // TODO: use androidMinSDK value from gradle.properties once it updates to 31
        minSdk Integer.valueOf(31)
        targetSdk Integer.valueOf(androidTargetSDK)
        versionCode 1
        versionName "2.0"
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++17"
                abiFilters "arm64-v8a"
                arguments "-DQNN_SDK_ROOT_PATH=" + qnnSDKLocalPath
            }
        }
        sourceSets {
            main {
                jniLibs.srcDir libsDir
            }
        }
        signingConfig signingConfigs.debug
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.valueOf("VERSION_$javaSourceCompatibilityVersion")
        targetCompatibility JavaVersion.valueOf("VERSION_$javaTargetCompatibilityVersion")
    }

    namespace "com.edgeai.chatappv2"
    externalNativeBuild {
        cmake {
            path file("src/main/cpp/CMakeLists.txt")
            version "3.22.1"
        }
    }
    packagingOptions {
        // Extract native libraries so they"re accessible via the file system directly.
        jniLibs.useLegacyPackaging = true
    }
    aaptOptions {
        noCompress "bin", "json"
    }
    kotlinOptions {
        jvmTarget = '11'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion = '1.5.14'
    }
    preBuild.doFirst {
        // Check if QNN SDK is set correctly
        if (!file(qnnSDKLocalPath).exists()) {
            throw new RuntimeException("QNN SDK does not exist at " + qnnSDKLocalPath + ". Please set `qnnSDKLocalPath` in build.gradle.")
        }

        // Copy required QNN libs
        if (!file(qnnSDKLocalPath + "/lib/aarch64-android/libGenie.so").exists()) {
            throw new RuntimeException("libGenie does not exist. Please set `qnnSDKLocalPath` in build.gradle.")
        }

        // Ensure genie-config and tokenizer is present
        models.each { model ->
            if (!file(relAssetsPath + model + "/genie-config.json").exists()) {
                throw new RuntimeException("Missing genie-config.json for " + model + ".")
            }
            if (!file(relAssetsPath + model + "/tokenizer.json").exists()) {
                throw new RuntimeException("Missing tokenizer.json for " + model + ".")
            }
        }

        def libsABIDir = buildDir.dir("libs/arm64-v8a")
        copy {
            from qnnSDKLocalPath

            include "**/lib/hexagon-v**/unsigned/libQnnHtpV**Skel.so"
            include "**/lib/aarch64-android/**" // Might include libraries which are not needed

            include "**/lib/external/**"

            into libsABIDir
            // Copy libraries without directory structure
            eachFile {
                path = name
            }
            includeEmptyDirs = false
        }
    }
}

dependencies {
    implementation fileTree(include: ["*.jar"], dir: "libs")
    implementation "androidx.appcompat:appcompat:1.7.0"
    implementation "com.google.android.material:material:1.12.0"
    implementation "androidx.constraintlayout:constraintlayout:2.2.1"
    implementation 'androidx.core:core-ktx:1.15.0'

    // Main TensorFlow Lite library
    implementation 'org.tensorflow:tensorflow-lite:2.16.1'
    implementation 'org.tensorflow:tensorflow-lite-support:0.4.4'
    implementation 'com.google.android.gms:play-services-tflite-gpu:16.4.0'
    implementation 'com.google.android.gms:play-services-tflite-java:16.4.0'
    implementation 'androidx.compose.ui:ui-android:1.7.8'
    implementation 'androidx.compose.foundation:foundation-android:1.7.8'
    implementation 'androidx.compose.material3:material3-android:1.3.1'
    implementation 'androidx.activity:activity-compose:1.10.1'
}

if (System.getProperty("user.dir") != project.rootDir.path) {
    throw new RuntimeException("This project should be opened from the root directory, NOT a subdirectory.")
}
