name: Architecture-Specific Build

on:
  workflow_dispatch:
  pull_request:

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Cache the extracted artifact directories
      - name: Cache architecture artifacts
        id: cache-artifacts
        uses: actions/cache@v3
        with:
          path: |
            aarch64-android
            hexagon-v75
            hexagon-v79
          # Use a cache key that makes sense for your use case.
          # For example, you might use the branch name or a hash of the release tag.
          key: ${{ runner.os }}-architecture-artifacts-${{ github.ref }}

      # Only download the release assets if the cache was not found
      - name: Download release assets
        if: steps.cache-artifacts.outputs.cache-hit != 'true'
        run: gh release download v0.0.1 -p '*.zip'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Only extract the artifacts if the cache was not found
      - name: Extract and create component artifacts
        if: steps.cache-artifacts.outputs.cache-hit != 'true'
        run: |
          # Create temporary directories
          mkdir -p {aarch64-android,hexagon-v75,hexagon-v79}
  
          # Extract files from the downloaded zips
          for zip in *.zip; do
            case "$zip" in
              aarch64-android.zip)
                unzip -j "$zip" 'aarch64-android/*' -d /opt/qcom/aitstack/qairt/2.31.0/lib/aarch64-android/
                ;;
              hexagon-v75.zip)
                unzip -j "$zip" 'hexagon-v75/*' -d /opt/qcom/aitstack/qairt/2.31.0/lib/hexagon-v75/unsigned/
                ;;
              hexagon-v79.zip)
                unzip -j "$zip" 'hexagon-v79/*' -d /opt/qcom/aitstack/qairt/2.31.0/lib/hexagon-v79/unsigned/
                ;;
            esac
          done
  
          # Display component sizes
          echo "Component sizes:"
          du -sh {aarch64-android,hexagon-v75,hexagon-v79}

      # Regardless of cache, upload the artifacts so that downstream jobs can use them
      - name: Upload aarch64-android artifact
        uses: actions/upload-artifact@v4
        with:
          name: aarch64-android
          path: /opt/qcom/aitstack/qairt/2.31.0/lib/aarch64-android/

      - name: Upload hexagon-v75 artifact
        uses: actions/upload-artifact@v4
        with:
          name: hexagon-v75
          path: /opt/qcom/aitstack/qairt/2.31.0/lib/hexagon-v75/unsigned/

      - name: Upload hexagon-v79 artifact
        uses: actions/upload-artifact@v4
        with:
          name: hexagon-v79
          path: /opt/qcom/aitstack/qairt/2.31.0/lib/hexagon-v79/unsigned/

  build-whisperkit:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout code
        uses: actions/checkout@v3

      # Clone the external repository
      - name: Clone WhisperKitAndroid Repository
        run: |
          git clone https://github.com/argmaxinc/WhisperKitAndroid.git
          sudo mkdir -p /opt/qcom/aitstack/qairt/2.31.0/lib/external

      # Restore cached jni-libs based on changes in the JNI source file
      - name: Restore cached jni-libs
        id: cache-jni-libs
        uses: actions/cache@v3
        with:
          path: /opt/qcom/aitstack/qairt/2.31.0/lib/external
          key: ${{ runner.os }}-jni-libs-${{ hashFiles('WhisperKitAndroid/jni/NativeWhisperKit.cpp') }}

      # Restore cached whisperkit-libs based on changes in the build environment config
      - name: Restore cached whisperkit-libs
        id: cache-whisperkit-libs
        uses: actions/cache@v3
        with:
          path: /opt/qcom/aitstack/qairt/2.31.0/lib/external
          key: ${{ runner.os }}-whisperkit-libs-${{ hashFiles('WhisperKitAndroid/scripts/dev_env.sh') }}

      - name: Update NativeWhisperKit.cpp Function Names
        working-directory: WhisperKitAndroid
        run: |
          # Replace the old JNI function prefix with the project-specific prefix.
          # Adjust the search pattern if your file uses a different name.
          sed -i 's/Java_com_argmaxinc_WhisperKitNative/Java_com_edgeai_chatappv2_WhisperKitNative/g' jni/NativeWhisperKit.cpp

      - name: Update QNN SDK Version in dev_env.sh and Dockerfile
        working-directory: WhisperKitAndroid
        run: |
          sed -i \
            -e 's#/qnn-runtime/2\.27\.0/qnn-runtime-2\.27\.0\.aar#/qnn-runtime/2.31.0/qnn-runtime-2.31.0.aar#g' \
            -e 's#/qnn-tflite-delegate/2\.27\.0/qnn-tflite-delegate-2\.27\.0\.aar#/qnn-litert-delegate/2.31.0/qnn-litert-delegate-2.31.0.aar#g' \
            -e 's/qnn-runtime-2\.27\.0\.aar/qnn-runtime-2.31\.0\.aar/g' \
            -e 's/qnn-tflite-delegate-2\.27\.0\.aar/qnn-litert-delegate-2.31\.0\.aar/g' \
            scripts/dev_env.sh scripts/Dockerfile

      # Build the dev environment and JNI libraries if either cache is missing
      - name: Build Dev Environment & JNI Libraries (.so Files)
        working-directory: WhisperKitAndroid
        if: steps.cache-jni-libs.outputs.cache-hit != 'true' || steps.cache-whisperkit-libs.outputs.cache-hit != 'true'
        run: |
          make ci-env
          docker exec axie_tflite make build jni
          docker exec axie_tflite ls .
          docker exec axie_tflite pwd

      # Save updated jni-libs to cache if they were rebuilt
      - name: Save jni-libs to cache
        if: steps.cache-jni-libs.outputs.cache-hit != 'true'
        uses: actions/cache@v3
        with:
          path: ./external/libs/android
          key: ${{ runner.os }}-jni-libs-${{ hashFiles('WhisperKitAndroid/jni/NativeWhisperKit.cpp') }}

      # Save updated whisperkit-libs to cache if they were rebuilt
      - name: Save whisperkit-libs to cache
        if: steps.cache-whisperkit-libs.outputs.cache-hit != 'true'
        uses: actions/cache@v3
        with:
          path: ./build/android
          key: ${{ runner.os }}-whisperkit-libs-${{ hashFiles('WhisperKitAndroid/scripts/dev_env.sh') }}

      - name: Inspect restored cache folders
        working-directory: WhisperKitAndroid
        run: |
          ls ./external/libs/android
          ls ./build/android

      - name: Copy shared libraries to target directory
        working-directory: WhisperKitAndroid
        run: |
          sudo chmod -R 777 /opt/qcom/aitstack/qairt/2.31.0/lib/external/
          cp external/libs/android/libavcodec.so /opt/qcom/aitstack/qairt/2.31.0/lib/external/
          cp external/libs/android/libavformat.so /opt/qcom/aitstack/qairt/2.31.0/lib/external/
          cp external/libs/android/libavutil.so /opt/qcom/aitstack/qairt/2.31.0/lib/external/
          cp external/libs/android/libqnn_delegate_jni.so /opt/qcom/aitstack/qairt/2.31.0/lib/external/
          cp external/libs/android/libSDL3.so /opt/qcom/aitstack/qairt/2.31.0/lib/external/
          cp external/libs/android/libswresample.so /opt/qcom/aitstack/qairt/2.31.0/lib/external/
          cp external/libs/android/libtensorflowlite.so /opt/qcom/aitstack/qairt/2.31.0/lib/external/
          cp external/libs/android/libtensorflowlite_gpu_delegate.so /opt/qcom/aitstack/qairt/2.31.0/lib/external/
          cp build/android/libwhisperkit.so /opt/qcom/aitstack/qairt/2.31.0/lib/external/
          cp build/android/libnative-whisper.so /opt/qcom/aitstack/qairt/2.31.0/lib/external/

      - name: Upload whisperkit artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cache-whisperkit
          path: /opt/qcom/aitstack/qairt/2.31.0/lib/external/

  build-app:
    runs-on: ubuntu-latest
    needs: [ prepare, build-whisperkit ]
    strategy:
      matrix:
        hexagon: [ hexagon-v75, hexagon-v79 ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download ${{ matrix.hexagon }} artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.hexagon }}

      - name: Download whisperkit artifact
        uses: actions/download-artifact@v4
        with:
          name: cache-whisperkit

      - name: List contents of ${{ matrix.hexagon }} folder
        run: |
          ls -la ${{ matrix.hexagon }}
          ls /opt/qcom/aitstack/qairt/2.31.0/lib/${{ matrix.hexagon }}/unsigned/
          ls /opt/qcom/aitstack/qairt/2.31.0/lib/${{ matrix.hexagon }}/unsigned/
          ls /opt/qcom/aitstack/qairt/2.31.0/lib/aarch64-android/

      
