name: Architecture-Specific Build

on:
  workflow_dispatch:
  pull_request:

jobs:
  download-whisperkit-models:
    runs-on: ubuntu-latest
    steps:
      - name: Check out this repo
        uses: actions/checkout@v3

      # Restore the models cache if it exists
      - name: Restore WhisperKit Models Cache
        id: whisperkit-cache
        uses: actions/cache@v3
        with:
          # You can adjust the path based on exactly where your models live
          path: WhisperKitAndroid/models
          key: ${{ runner.os }}-whisperkit-models-${{ hashFiles('WhisperKitAndroid/Makefile') }}
          restore-keys: |
            ${{ runner.os }}-whisperkit-models-

      - name: Clone WhisperKitAndroid Repository
        if: steps.whisperkit-cache.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/argmaxinc/WhisperKitAndroid.git
          cd WhisperKitAndroid
          make download-models

      # Optionally upload the models as an artifact. This is useful if you want
      # to inspect or download the models directly from the Actions run logs.
      - name: Upload WhisperKit Models Artifact
        uses: actions/upload-artifact@v4
        with:
          name: whisperkit-models
          path: WhisperKitAndroid/models

      # If the cache was not previously hit, update the cache now that models are downloaded
      - name: Update WhisperKit Models Cache
        if: steps.whisperkit-cache.outputs.cache-hit != 'true'
        uses: actions/cache@v3
        with:
          path: WhisperKitAndroid/models
          key: ${{ runner.os }}-whisperkit-models-${{ hashFiles('WhisperKitAndroid/Makefile') }}

  build-whisperkit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Clone the external repository and create the target directory
      - name: Clone WhisperKitAndroid Repository
        run: |
          git clone https://github.com/argmaxinc/WhisperKitAndroid.git

      # Restore cached artifacts from qairt/lib/external
      - name: Restore cached whisperkit artifacts
        id: cache-whisperkit
        uses: actions/cache@v3
        with:
          path: qairt/2.31.0/lib/external
          key: ${{ runner.os }}-whisperkit-${{ hashFiles('WhisperKitAndroid/jni/NativeWhisperKit.cpp', 'WhisperKitAndroid/scripts/dev_env.sh') }}

      - name: Update NativeWhisperKit.cpp Function Names
        working-directory: WhisperKitAndroid
        run: |
          sed -i 's/Java_com_argmaxinc_WhisperKitNative/Java_com_edgeai_chatappv2_WhisperKitNative/g' jni/NativeWhisperKit.cpp

      - name: Update QNN SDK Version in dev_env.sh and Dockerfile
        working-directory: WhisperKitAndroid
        run: |
          sed -i \
            -e 's#/qnn-runtime/2\.27\.0/qnn-runtime-2\.27\.0\.aar#/qnn-runtime/2.31.0/qnn-runtime-2.31.0.aar#g' \
            -e 's#/qnn-tflite-delegate/2\.27\.0/qnn-tflite-delegate-2\.27\.0\.aar#/qnn-litert-delegate/2.31.0/qnn-litert-delegate-2.31.0.aar#g' \
            -e 's/qnn-runtime-2\.27\.0\.aar/qnn-runtime-2.31.0.aar/g' \
            -e 's/qnn-tflite-delegate-2\.27\.0\.aar/qnn-litert-delegate-2.31.0.aar/g' \
            scripts/dev_env.sh scripts/Dockerfile

      - name: Build Dev Environment & JNI Libraries (.so Files)
        working-directory: WhisperKitAndroid
        if: steps.cache-whisperkit.outputs.cache-hit != 'true'
        run: |
          make ci-env
          docker exec axie_tflite make build jni
          docker exec axie_tflite ls .
          docker exec axie_tflite pwd

      # Copy the built libraries to the target directory in the repository
      - name: Copy shared libraries to target directory
        if: steps.cache-whisperkit.outputs.cache-hit != 'true'
        working-directory: WhisperKitAndroid
        run: |
          mkdir -p ../qairt/2.31.0/lib/external
          cp external/libs/android/libavcodec.so ../qairt/2.31.0/lib/external/
          cp external/libs/android/libavformat.so ../qairt/2.31.0/lib/external/
          cp external/libs/android/libavutil.so ../qairt/2.31.0/lib/external/
          cp external/libs/android/libqnn_delegate_jni.so ../qairt/2.31.0/lib/external/
          cp external/libs/android/libSDL3.so ../qairt/2.31.0/lib/external/
          cp external/libs/android/libswresample.so ../qairt/2.31.0/lib/external/
          cp external/libs/android/libtensorflowlite.so ../qairt/2.31.0/lib/external/
          cp external/libs/android/libtensorflowlite_gpu_delegate.so ../qairt/2.31.0/lib/external/
          cp build/android/libwhisperkit.so ../qairt/2.31.0/lib/external/
          cp build/android/libnative-whisper.so ../qairt/2.31.0/lib/external/

      # Save the final built artifacts (under qairt/lib/external) to cache
      - name: Save whisperkit artifacts to cache
        if: steps.cache-whisperkit.outputs.cache-hit != 'true'
        uses: actions/cache@v3
        with:
          path: qairt/2.31.0/lib/external
          key: ${{ runner.os }}-whisperkit-${{ hashFiles('WhisperKitAndroid/jni/NativeWhisperKit.cpp', 'WhisperKitAndroid/scripts/dev_env.sh') }}

      - name: Upload whisperkit artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cache-whisperkit
          path: qairt/2.31.0/lib/external/


  build-app:
    runs-on: ubuntu-latest
    needs: [ build-whisperkit, download-whisperkit-models ]
    strategy:
      matrix:
        hexagon: [ hexagon-v75, hexagon-v79 ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create paths
        run: |
          mkdir -p qairt/

      # Download release asset only if cache was not found
      - name: Download release asset
        run: |
          gh release download v0.0.1 -p 'qairt.zip'
          unzip -o "qairt.zip" -d .
          ls qairt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Download whisperkit artifact (external)
        uses: actions/download-artifact@v4
        with:
          name: cache-whisperkit
          path: qairt/lib/external/

      - name: Download whisperkit models
        uses: actions/download-artifact@v4
        with:
          name: whisperkit-models
          path: app/src/main/assets/

      - name: List contents of artifact folders
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p app/src/main/cpp/include
          cp -r qairt/2.31.0/include/Genie/* app/src/main/cpp/include

          pwd
          ls
          echo ""
          echo "Contents of qairt/2.31.0/lib/${{ matrix.hexagon }}/unsigned/"
          ls qairt/2.31.0/lib/${{ matrix.hexagon }}/unsigned/

          echo ""
          echo "Contents of app/src/main/cpp/include"
          ls app/src/main/cpp/include

          echo ""
          echo "Contents of qairt/2.31.0/lib/aarch64-android/"
          ls qairt/2.31.0/lib/aarch64-android/
          
          echo ""
          echo "Contents of qairt/2.31.0/lib/external"
          ls qairt/2.31.0/lib/external

          # .bin models, tokenizer, genie config
          gh release download v0.0.1 -p '*.bin' --dir app/src/main/assets/models/llama3_2_3b
          gh release download v0.0.1 -p 'tokenizer.json' --dir app/src/main/assets/models/llama3_2_3b
          gh release download v0.0.1 -p 'genie_config.json' --dir app/src/main/assets/models/llama3_2_3b

          # hexagon config
          gh release download v0.0.1 -p 'htp_backend_ext_config.json' --dir app/src/main/assets/htp_config

          echo ""
          echo "Contents of app/src/main/assets/models"
          ls app/src/main/assets/models

      - name: Build app
        run: ./gradlew assembleRelease