name: Architecture-Specific Build

on:
  workflow_dispatch:
  pull_request:

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download release assets
        run: gh release download v0.0.1 -p '*.zip'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract and create component artifacts
        run: |
          # Create temporary directories
          mkdir -p {aarch64-android,hexagon-v75,hexagon-v79}

          # Extract files from all zips (junk paths)
          for zip in *.zip; do
            case "$zip" in
              aarch64-android.zip)
                unzip -j "$zip" 'aarch64-android/*' -d aarch64-android/
                ;;
              hexagon-v75.zip)
                unzip -j "$zip" 'hexagon-v75/*' -d hexagon-v75/
                ;;
              hexagon-v79.zip)
                unzip -j "$zip" 'hexagon-v79/*' -d hexagon-v79/
                ;;
            esac
          done

          # Upload as separate artifacts
          echo "Component sizes:"
          du -sh {aarch64-android,hexagon-v75,hexagon-v79}
        shell: bash

      - name: Upload aarch64-android artifact
        uses: actions/upload-artifact@v4
        with:
          name: aarch64-android
          path: aarch64-android/

      - name: Upload hexagon-v75 artifact
        uses: actions/upload-artifact@v4
        with:
          name: hexagon-v75
          path: hexagon-v75/

      - name: Upload hexagon-v79 artifact
        uses: actions/upload-artifact@v4
        with:
          name: hexagon-v79
          path: hexagon-v79/

  build:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch_config:
          - name: gen3
            hexagon: hexagon-v75
          - name: 8elite
            hexagon: hexagon-v79

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download required artifacts
        uses: actions/download-artifact@v4
        with:
          name: aarch64-android
          path: app/src/main/jniLibs/

      - name: Download hexagon files
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.arch_config.hexagon }}
          path: app/src/main/jniLibs/

      - name: Verify files
        run: |
          echo "Building for ${{ matrix.arch_config.name }}"
          echo "jniLibs contents:"
          ls -l app/src/main/jniLibs/
          echo "Total files: $(find app/src/main/jniLibs/ -type f | wc -l)"

  build-whisperkit:
    runs-on: ubuntu-latest
    steps:
      - name: Clone WhisperKitAndroid Repository
        run: git clone https://github.com/argmaxinc/WhisperKitAndroid.git

      - name: Update NativeWhisperKit.cpp Function Names
        working-directory: WhisperKitAndroid
        run: |
          # Replace the old JNI function prefix with the project-specific prefix.
          # Adjust the search pattern if your file uses a different name.
          sed -i 's/Java_com_argmaxinc_WhisperKitNative/Java_com_edgeai_chatappv2_WhisperKitNative/g' jni/NativeWhisperKit.cpp

      # - name: Update TranscribeTask.cpp for Correct Paths
      #   working-directory: WhisperKitAndroid
      #   run: |
      #     replacement=$(cat <<'EOF'
      # #if (JNI_BUILD)
      # #define TRANSCRIBE_TASK_TFLITE_ROOT_PATH "/data/user/0/com.edgeai.chatappv2/files"
      # #define TRANSCRIBE_TASK_DEFAULT_LIB_DIR "/data/user/0/com.edgeai/chatappv2/lib"
      # #define TRANSCRIBE_TASK_DEFAULT_CACHE_DIR "/data/user/0/com.edgeai/chatappv2/cache"
      # EOF
      #     )
      #     sed -i "/#if (JNI_BUILD)/,/#elif/ c\\
      #   $replacement" Whisperkit/src/TranscribeTask.cpp
      - name: Update QNN SDK Version in dev_env.sh and Dockerfile
        working-directory: WhisperKitAndroid
        run: |
          sed -i \
            -e 's#/qnn-runtime/2\.27\.0/qnn-runtime-2\.27\.0\.aar#/qnn-runtime/2.31.0/qnn-runtime-2.31.0.aar#g' \
            -e 's#/qnn-tflite-delegate/2\.27\.0/qnn-tflite-delegate-2\.27\.0\.aar#/qnn-litert-delegate/2.31.0/qnn-litert-delegate-2.31.0.aar#g' \
            -e 's/qnn-runtime-2\.27\.0\.aar/qnn-runtime-2.31\.0\.aar/g' \
            -e 's/qnn-tflite-delegate-2\.27\.0\.aar/qnn-litert-delegate-2.31\.0\.aar/g' \
            scripts/dev_env.sh scripts/Dockerfile

      - name: Build Dev Environment & JNI Libraries (.so Files)
        working-directory: WhisperKitAndroid
        run: |
          make ci-env
          make build jni

      # - name: Copy Shared Libraries to Target Directory
      #   run: |
      #     # Create the target directory (adjust permissions if necessary)
      #     sudo mkdir -p /opt/qcom/aitstack/qairt/2.31.0/lib/external
      #     cd WhisperKitAndroid
      #     # Copy libraries from external/libs/android/
      #     sudo cp external/libs/android/libavcodec.so /opt/qcom/aitstack/qairt/2.31.0/lib/external/
      #     sudo cp external/libs/android/libavformat.so /opt/qcom/aitstack/qairt/2.31.0/lib/external/
      #     sudo cp external/libs/android/libavutil.so /opt/qcom/aitstack/qairt/2.31.0/lib/external/
      #     sudo cp external/libs/android/libqnn_delegate_jni.so /opt/qcom/aitstack/qairt/2.31.0/lib/external/
      #     sudo cp external/libs/android/libSDL3.so /opt/qcom/aitstack/qairt/2.31.0/lib/external/
      #     sudo cp external/libs/android/libswresample.so /opt/qcom/aitstack/qairt/2.31.0/lib/external/
      #     sudo cp external/libs/android/libtensorflowlite.so /opt/qcom/aitstack/qairt/2.31.0/lib/external/
      #     sudo cp external/libs/android/libtensorflowlite_gpu_delegate.so /opt/qcom/aitstack/qairt/2.31.0/lib/external/
      #     # Copy libraries from build/android/
      #     sudo cp build/android/libwhisperkit.so /opt/qcom/aitstack/qairt/2.31.0/lib/external/
      #     sudo cp build/android/libnative-whisperkit.so /opt/qcom/aitstack/qairt/2.31.0/lib/external/